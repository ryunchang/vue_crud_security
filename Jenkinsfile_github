def label = "agent-${UUID.randomUUID().toString()}"
def gitBranch = 'master'
def docker_registry = "ghcr.io"  

// 본인 이미지 사용
def imageName = "ghcr.io/ryunchang/vue_crud_security"
def git_ops_name = "frontend-gitops-kustomize"
// 본인 Namespace
def P_NAMESPACE = "default"
// 본인 slave pvc
def P_SLAVE_PVC = "jenkins-edu6-slave-pvc"
// 본인 이메일
def P_EMAIL = "ckdtjq202001@gmail.com"


def TAG = getTag(gitBranch)

podTemplate(label: label, serviceAccount: 'jenkins-admin', namespace: P_NAMESPACE,
    containers: [
        containerTemplate(name: 'podman', image: 'ghcr.io/shclub/podman_kustomize:v1', ttyEnabled: true, command: 'cat', privileged: true, alwaysPullImage: true)
        ,containerTemplate(name: 'jnlp', image: 'ghcr.io/shclub/jenkins/jnlp-slave:latest-jdk11', args: '${computer.jnlpmac} ${computer.name}')
    ],
    volumes: [
        hostPathVolume(hostPath: '/etc/containers' , mountPath: '/var/run/containerd' ),
        persistentVolumeClaim(mountPath: '/var/jenkins_home', claimName: P_SLAVE_PVC,readOnly: false)
        ]){    
      
    node(label) {
        
      stage('Clone Git Project') {
          script{
             checkout scm
          }
       } 
                     
      stage('Podman Build & Image Push ') {
              container('podman') {
                  withCredentials([usernamePassword(credentialsId: 'github_ci',usernameVariable: 'USERNAME',passwordVariable: 'PASSWORD')]) {
                     sh  """
                     podman login -u ${USERNAME} -p ${PASSWORD} ${docker_registry} --tls-verify=false
                     podman build -t ${imageName}:${TAG} --cgroup-manager=cgroupfs --tls-verify=false .
                     podman push ${imageName}:${TAG} --tls-verify=false
                     echo 'TAG ==========> ' ${TAG}
                     """
                  }
              }
        }

        stage('GitOps update') {
            container('podman') {
               withCredentials([usernamePassword(credentialsId: 'github_ci',usernameVariable: 'USERNAME',passwordVariable: 'PASSWORD')]) {
                    sh """  
                        cd ~
                        git clone https://${USERNAME}:${PASSWORD}@github.com/${USERNAME}/${git_ops_name}
                        cd ${git_ops_name}
                        git checkout HEAD
                        kustomize edit set image ${imageName}:${TAG}
                        git config --global user.email ${P_EMAIL}
                        git config --global user.name ${USERNAME}
                        git add .
                        git commit -am 'update image tag  ${TAG} from My_Jenkins'
                        cat kustomization.yaml
                        git push origin HEAD
                    """
               } 
            }
        }
    }
}

def getTag(branchName){     
    def TAG
    def DATETIME_TAG = new Date().format('yyyyMMddHHmmss')
    TAG = "${DATETIME_TAG}"
    return TAG
}  
